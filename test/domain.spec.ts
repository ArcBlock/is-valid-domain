import { test, expect } from 'vitest'
import isValidDomain from '../src/index'
import sldMap from '../data/sldMap.json'

test('tld and simple subdomains', function (t) {
  expect(isValidDomain('example.com')).toBe(true)
  expect(isValidDomain('foo.example.com')).toBe(true)
  expect(isValidDomain('bar.foo.example.com')).toBe(true)
  expect(isValidDomain('exa-mple.co.uk')).toBe(true)
  expect(isValidDomain('a.com')).toBe(true)
  expect(isValidDomain('a.b')).toBe(true)
  expect(isValidDomain('foo.bar.baz')).toBe(true)
  expect(isValidDomain('foo-bar.ba-z.qux')).toBe(true)
  expect(isValidDomain('hello.world')).toBe(true)
  expect(isValidDomain('ex-am-ple.com')).toBe(true)
  expect(isValidDomain('xn--80ak6aa92e.com')).toBe(true)
  expect(isValidDomain('example.a9')).toBe(true)
  expect(isValidDomain('example.9a')).toBe(true)
  expect(isValidDomain('example.99')).toBe(false)
})

test('more subdomains', function (t) {
  expect(isValidDomain('example.com')).toBe(true)
  expect(isValidDomain('foo.example.com')).toBe(true)
  expect(isValidDomain('example.com', { subdomain: true })).toBe(true)
  expect(isValidDomain('foo.example.com', { subdomain: true })).toBe(true)
  expect(isValidDomain('foo.example.com', { subdomain: false })).toBe(false)
  expect(isValidDomain('-foo.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('foo-.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('-foo-.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('-foo.example.com')).toBe(false)
  expect(isValidDomain('foo-.example.com')).toBe(false)
  expect(isValidDomain('-foo-.example.com')).toBe(false)
  expect(isValidDomain('foo-.bar.example.com')).toBe(false)
  expect(isValidDomain('-foo.bar.example.com')).toBe(false)
  expect(isValidDomain('-foo-.bar.example.com')).toBe(false)
  expect(isValidDomain('-foo-.bar.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('foo-.bar.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('-foo-.bar.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('-foo-.-bar-.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('example.com', { subdomain: false })).toBe(true)
  expect(isValidDomain('*.example.com', { subdomain: true })).toBe(false)
  expect(isValidDomain('abcd--def.example.com', { subdomain: true })).toBe(true)
  expect(isValidDomain('ab--cd.ab--cd.example.com', { subdomain: true })).toBe(true)
})

test('sld', function (t) {
  expect(isValidDomain('example.co.uk')).toBe(true)
  expect(isValidDomain('exampl1.co.uk', { subdomain: false })).toBe(true)
  expect(isValidDomain('abc.example.co.uk', { subdomain: false })).toBe(false)
  expect(isValidDomain('*.example.co.uk', { subdomain: true })).toBe(false)
  expect(isValidDomain('*.example.co.uk', { subdomain: true, wildcard: true })).toBe(true)
})

test('slds from map file', function (t) {
  for (const sld in sldMap) {
    expect(isValidDomain(`example.${sld}`)).toBe(true)
  }
})

test('punycode', function (t) {
  expect(isValidDomain('xn--6qq79v.xn--fiqz9s')).toBe(true)
  expect(isValidDomain('xn--ber-goa.com')).toBe(true)
  expect(isValidDomain('xn--a--ber-goa.com')).toBe(false)
  expect(isValidDomain('xn--c1yn36f.example.com')).toBe(true)
  expect(isValidDomain('xn--addas-o4a.de')).toBe(true)
  expect(isValidDomain('xn--p8j9a0d9c9a.xn--q9jyb4c')).toBe(true)
  expect(isValidDomain('привет-мир.рф', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('test-me.рф', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('test--me.рф', { allowUnicode: true })).toBe(false)
  expect(isValidDomain('приветмир.com', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('xn--b1aghctohfp.xn--p1ai', { allowUnicode: false })).toBe(true)
  expect(isValidDomain('привет-мир.com', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('привет-мир.рф', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('дядя-ваня.рф', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('дядя-ваня.ru.com', { allowUnicode: true })).toBe(true)
})

test('unicode', function (t) {
  expect(isValidDomain('はじめよう.みんな')).toBe(false)
  expect(isValidDomain('名がドメイン.com')).toBe(false)
  expect(isValidDomain('はじめよう.みんな', { allowUnicode: true })).toBe(true)
  expect(isValidDomain('名がドメイン.com', { allowUnicode: true })).toBe(true)
})

test('country code tld', function (t) {
  expect(isValidDomain('ai.')).toBe(false)
  expect(isValidDomain('ai')).toBe(false)
  expect(isValidDomain('ai.', { topLevel: true })).toBe(true)
  expect(isValidDomain('ai', { topLevel: true })).toBe(true)
  expect(isValidDomain('ae.')).toBe(false)
  expect(isValidDomain('ae.', { topLevel: true })).toBe(true)
  expect(isValidDomain('xx.', { topLevel: true })).toBe(false)
})

test('invalid tld and subdomain', function (t) {
  expect(isValidDomain('localhost')).toBe(false)
  expect(isValidDomain('127.0.0.1')).toBe(false)
  expect(isValidDomain('bar.q-ux')).toBe(false)
  expect(isValidDomain('exa_mple.com')).toBe(false)
  expect(isValidDomain('example')).toBe(false)
  expect(isValidDomain('ex*mple.com')).toBe(false)
  expect(isValidDomain('@#$@#$%fd')).toBe(false)
  expect(isValidDomain('_example.com')).toBe(false)
  expect(isValidDomain('-example.com')).toBe(false)
  expect(isValidDomain('xn–pple-43d.com')).toBe(false)
  expect(isValidDomain('foo._example.com')).toBe(false)
  expect(isValidDomain('foo.-example.com')).toBe(false)
  expect(isValidDomain('foo.example-.co.uk')).toBe(false)
  expect(isValidDomain('example-.com')).toBe(false)
  expect(isValidDomain('example_.com')).toBe(false)
  expect(isValidDomain('foo.example-.com')).toBe(false)
  expect(isValidDomain('foo.example_.com')).toBe(false)
  expect(isValidDomain('example.com-')).toBe(false)
  expect(isValidDomain('example.com_')).toBe(false)
  expect(isValidDomain('-foo.example.com_')).toBe(false)
  expect(isValidDomain('_foo.example.com_')).toBe(false)
  expect(isValidDomain('*.com_')).toBe(false)
  expect(isValidDomain('*.*.com_')).toBe(false)
})

test('subdomain underscores', function (t) {
  expect(isValidDomain('_dnslink.ipfs.io')).toBe(true)
  expect(isValidDomain('_dnslink.ip_fs.io')).toBe(false)
  expect(isValidDomain('_foo.example.com')).toBe(true)
  expect(isValidDomain('xn--_eamop.donata.com')).toBe(true)
  expect(isValidDomain('__foo.example.com')).toBe(true)
})

test('wildcard', function (t) {
  expect(isValidDomain('*.example.com')).toBe(false)
  expect(isValidDomain('*.example.com', { wildcard: false })).toBe(false)
  expect(isValidDomain('*.example.com', { wildcard: true })).toBe(true)
  expect(isValidDomain('*.*.com', { wildcard: true })).toBe(false)
  expect(isValidDomain('*.com', { wildcard: true })).toBe(false)
  expect(isValidDomain('example.com', { wildcard: true })).toBe(true)
  expect(isValidDomain('example.com', { subdomain: true, wildcard: true })).toBe(true)
  expect(isValidDomain('*.example.com', { subdomain: true, wildcard: true })).toBe(true)
  expect(isValidDomain('*.example.com', { subdomain: false, wildcard: true })).toBe(false)
})

test('length', function (t) {
  expect(isValidDomain(`${'a'.repeat(63)}.${'b'.repeat(63)}.${'c'.repeat(63)}.${'c'.repeat(61)}`)).toBe(true)
  expect(isValidDomain(`${'a'.repeat(63)}.${'b'.repeat(63)}.${'c'.repeat(63)}.${'c'.repeat(61)}.`)).toBe(true)
  expect(isValidDomain(`${'a'.repeat(63)}.${'b'.repeat(63)}.${'c'.repeat(63)}.${'c'.repeat(62)}`)).toBe(false)
})

test('invalid types', function (t) {
  expect(isValidDomain(3434 as any)).toBe(false)
  expect(isValidDomain('')).toBe(false)
  expect(isValidDomain({} as any)).toBe(false)
  expect(isValidDomain(function () {} as any)).toBe(false)
})

test('invalid values', function (t) {
  expect(isValidDomain('foo.example.com*')).toBe(false)
  expect(isValidDomain('foo.example.com*', { wildcard: true })).toBe(false)
  expect(isValidDomain('google.com"\'\"\""\\"\\\'test test')).toBe(false)
  expect(isValidDomain('google.com.au\'"\'\"\""\\"\\\'test')).toBe(false)
  expect(isValidDomain('...')).toBe(false)
  expect(isValidDomain('example..com')).toBe(false)
  expect(isValidDomain('.example.')).toBe(false)
  expect(isValidDomain('.example.com')).toBe(false)
  expect(isValidDomain('"example.com"')).toBe(false)
  expect(isValidDomain('http://xn--addas-o4a.de')).toBe(false)
})

test('thai domains', function (t) {
  expect(isValidDomain('universal-acceptance-test.international')).toBe(true)
  expect(isValidDomain('universal-acceptance-test.icu')).toBe(true)
  expect(isValidDomain('ยูเอทดสอบ.ไทย')).toBe(true)
  expect(isValidDomain('ทีเอชนิค.องค์กร.ไทย')).toBe(true)
  expect(isValidDomain('เราไม่ทิ้งกัน.com')).toBe(true)
})
